Bottom: 0aeeceef2429ec8ffc511052f35a92d7c755928c
Top:    9b6c62dd378c48e2a42ed7b9d4712eaa7a69c668
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2012-03-20 20:51:46 -0400

Refresh of egg-support

---

diff --git a/board/Redwire/rw_egg/Makefile b/board/Redwire/rw_egg/Makefile
new file mode 100644
index 0000000..295b459
--- /dev/null
+++ b/board/Redwire/rw_egg/Makefile
@@ -0,0 +1,55 @@
+#
+# (C) Copyright 2003-2008
+# Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+#
+# (C) Copyright 2008
+# Stelian Pop <stelian.pop@leadtechdesign.com>
+# Lead Tech Design <www.leadtechdesign.com>
+#
+# See file CREDITS for list of people who contributed to this
+# project.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+
+include $(TOPDIR)/config.mk
+
+LIB	= $(obj)lib$(BOARD).o
+
+SOBJS	= lowlevel_init.o
+COBJS	:= rw_egg.o
+
+SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
+OBJS	:= $(addprefix $(obj),$(COBJS))
+SOBJS	:= $(addprefix $(obj),$(SOBJS))
+
+$(LIB):	$(obj).depend $(OBJS) $(SOBJS)
+	$(call cmd_link_o_target, $(OBJS) $(SOBJS))
+
+clean:
+	rm -f $(SOBJS) $(OBJS)
+
+distclean:	clean
+	rm -f $(LIB) core *.bak $(obj).depend
+
+#########################################################################
+
+# defines $(obj).depend target
+include $(SRCTREE)/rules.mk
+
+sinclude $(obj).depend
+
+#########################################################################
diff --git a/board/Redwire/rw_egg/config.mk b/board/Redwire/rw_egg/config.mk
new file mode 100644
index 0000000..482a150
--- /dev/null
+++ b/board/Redwire/rw_egg/config.mk
@@ -0,0 +1 @@
+TEXT_BASE = 0x33600000
diff --git a/board/Redwire/rw_egg/lowlevel_init.S b/board/Redwire/rw_egg/lowlevel_init.S
new file mode 100644
index 0000000..43bec6d
--- /dev/null
+++ b/board/Redwire/rw_egg/lowlevel_init.S
@@ -0,0 +1,307 @@
+/*
+ * armboot - Startup Code for ARM926EJS CPU-core
+ * Based on cpu/arm926ejs/start.S
+ * 
+ * Copyright (c) 2010 NXP Semiconductors
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <config.h>
+#include <common.h>
+#include <version.h>
+#include <asm/arch/hardware.h>
+#include <asm/arch/clock.h>
+
+/*
+ * special lookup flags
+ */
+#define DO_MEM_DELAY	1
+#define DO_MEM_READ	2
+
+.globl lowlevel_init
+.type lowlevel_init,function
+lowlevel_init:
+#ifndef CONFIG_SPL_BUILD
+	mov	pc, lr		/* do nothing return */
+#else
+	/*
+	* Go setup Memory and board specific bits prior to relocation.
+	*/
+	ldr	sp, =(0x1103B000)
+	bic	sp, sp, #7 /* 8-byte alignment for ABI compliance */
+
+	stmfd	sp!, {ip, lr}
+	adr	r0, CGU_FDIV_REG_VALS
+	adr	r1, CGU_FDIV_CLKS
+	bl	init_clocks /* go setup pll,mux,memory */
+
+#ifdef CONFIG_EA3152
+	/*
+	 * For LPC3152 board, set IO voltage for 
+	 * SDRAM to work properly
+	 */
+	bl	setup_sdram_voltage
+#endif
+	/*
+	 * Setup Memory Controller & SDRAM Timing.
+	 */
+	bl	mpmc_sdram_init /* go setup pll,mux,memory */
+
+	/* Return to U-boot via saved link register */
+	ldmfd	sp!, {ip, pc}
+
+	/*
+	 *************************************************************************
+	 *
+	 * Initialize MPMC and SDRAM Timing registers
+	 *
+	 *************************************************************************
+	 */
+mpmc_sdram_init:
+	mov 	r9, lr
+	/* memory control configuration */
+	/* make r0 relative the current location so that it */
+	/* reads INITMEM_DATA out of FLASH rather than memory ! */
+	/*   r0 = current word pointer */
+	/*   r1 = end word location, one word past last actual word */
+	/*   r3 = address for writes, special lookup flags */
+	/*   r4 = value for writes, delay constants, or read addresses */
+	/*   r2 = location for mem reads */
+	adr 	r0, INITMEM_DATA
+	adr	r1, INITMEM_DATA_END
+
+mem_loop:
+	cmp	r1, r0
+	moveq	pc, r9		@ Done
+
+	ldr	r3, [r0], #4	@ Fetch Destination Register Address, or 1 for delay
+	ldr	r4, [r0], #4	@ value
+
+	cmp	r3, #DO_MEM_DELAY
+	bleq	mem_delay
+	beq	mem_loop
+	cmp	r3, #DO_MEM_READ
+	ldreq	r2, [r4]
+	beq	mem_loop
+	str	r4, [r3]	@ normal register/ram store
+	b	mem_loop
+
+mem_delay:
+	ldr	r5, =TIMER0_BASE
+	mov	r6, #0x88	    @ divide 6MHz clock by 256, enable
+	str	r6, [r5, #8]
+	ldr	r6, [r5, #4]    @load current counter
+	sub r4, r6, r4
+0:	ldr	r6, [r5, #4]	@ timer value
+	cmp	r6, r4
+	bhi	0b
+	mov	r6, #0		@ disable timer
+	str	r6, [r5, #8]
+	mov	pc, lr
+
+	.ltorg
+/* the literal pools origin */
+
+INITMEM_DATA:
+
+	.word	0x13002884 /*SYS_REMAP_ADDR: */
+	.word	0x11028000 
+	.word	0x13002890 /*SYS_MUX_LCD_EBI:*/
+	.word	0x00000001 
+	/* Enable External Memory Ctrl */
+	.word	0x17008000 /*MPMC_CTRL:*/
+	.word	0x1 
+	/* Force HCLK to MPMC_CLK to 1:1 ratio */
+	.word	0x17008008 /*MPMC_CONFIG:*/
+	.word	0x0 
+	/* Set MPMC delay gates appropriately based on trace lengths between
+	 SDRAM and the chip. Also based on the delay startergy used for SDRAM. */
+	.word	0x13002868 /*SYS_MPMC_DELAY:*/
+	.word	0x824 
+	/* Initialize timings for LCD display, 16 bit */
+	.word	0x17008200 /*MPMC_STCONFIG0:*/
+	.word	0x81 
+	.word	0x17008204 /*MPMC_STWTWEN0:*/
+	.word	0x2 
+	.word	0x17008208 /*MPMC_STWTOEN0:*/
+	.word	0x1
+	.word	0x1700820C /*MPMC_STWTRD0:*/
+	.word	0x15
+	.word	0x17008210 /*MPMC_STWTPG0:*/
+	.word	0x2
+	.word	0x17008214 /*MPMC_STWTWR0:*/
+	.word	0x4
+	.word	0x17008218 /*MPMC_STWTTURN0:*/
+	.word	0x2
+
+	/* Put Delay of 100us */
+	.word	DO_MEM_DELAY
+	.word	4
+	/* Set command delay startergy */
+	.word	0x17008028 /*MPMC_DYRDCFG:*/
+	.word	0x1
+	/* Configure "device config register" nSDCE0 for proper width
+	 * SDRAM 
+	 */
+	.word	0x17008100 /*MPMC_DYCONFIG:*/
+	.word	0x680
+	.word	0x17008104 /*MPMC_DYRASCAS:*/
+	.word	0x202
+	/* Minimum 20ns program 1 so that atleast 2 HCLKs are used */
+	.word	0x17008030 /*MPMC_DYTRP:*/
+	.word	0x2
+	.word	0x17008034 /*MPMC_DYTRAS:*/
+	.word	0x4
+	.word	0x17008038 /*MPMC_DYTSREX:*/
+	.word	0x7
+	.word	0x1700803C /*MPMC_DYTAPR:*/
+	.word	0x4
+	.word	0x17008040 /*MPMC_DYTDAL:*/
+	.word	0x5
+	.word	0x17008044 /*MPMC_DYTWR:*/
+	.word	0x7
+	.word	0x17008048 /*MPMC_DYTRC:*/
+	.word	0x6
+	.word	0x1700804C /*MPMC_DYTRFC:*/
+	.word	0x6
+	.word	0x17008050 /*MPMC_DYTXSR:*/
+	.word	0x7
+	.word	0x17008054 /*MPMC_DYTRRD:*/
+	.word	0x1
+	.word	0x17008058 /*MPMC_DYTMRD:*/
+	.word	0x2
+	/* Put delay 100us */
+	.word	DO_MEM_DELAY
+	.word	4
+	/* Issue continuous NOP commands (INIT & MRS set) */
+	.word	0x17008020 /*MPMC_DYNCTL:*/
+	.word	0x183
+	/* Put delay 200us */
+	.word	DO_MEM_DELAY
+	.word	6
+	/* Issue a "pre-charge all" command */
+	.word	0x17008020
+	.word	0x103
+	/*******************************************************************
+	* Do at least 2 quick refresh cycles now.
+	******************************************************************/
+	.word	0x17008024 /*MPMC_DYNREF:*/
+	.word	0x1
+	/* Put delay 250us */
+	.word	DO_MEM_DELAY
+	.word	8
+	/*******************************************************************
+	* Set operational refersh rate.
+	******************************************************************/
+	.word	0x17008024 /*MPMC_DYNREF:*/
+	.word	0x2b
+	/* Select mode register update mode */
+	.word	0x17008020 /*MPMC_DYNCTL*/
+	.word	0x83
+	/*******************************************************************
+	* Program the SDRAM internal mode registers with CAS latency.
+	******************************************************************/
+	.word DO_MEM_READ
+	.word 0x30023000
+
+	/* Select normal operating mode */
+	.word	0x17008020 /*MPMC_DYNCTL:*/
+	.word	0x3
+
+	/* Enable buffer */
+	.word	0x17008100 /*MPMC_DYCONFIG:*/
+	.word	0x80680
+	.word	0x17008020 /*MPMC_DYNCTL: */
+	.word	0x0
+
+	/* program external refresh controller */
+	.word   0x13002878  /* SYSCREG_MPMC_TESTMODE0 */
+	.word   SYSREG_TEST0_VAL         
+	.word   0x1300287c  /*SYSCREG_MPMC_TESTMODE1 */
+	.word   SYSREG_TEST1_VAL        
+
+INITMEM_DATA_END:
+CGU_FDIV_REG_VALS:
+	.word	CGU_DEF_FDIV0_VAL	 
+	.word	CGU_DEF_FDIV1_VAL
+	.word	CGU_DEF_FDIV2_VAL
+	.word	CGU_DEF_FDIV3_VAL
+	.word	CGU_DEF_FDIV4_VAL
+	.word	CGU_DEF_FDIV5_VAL
+	.word	CGU_DEF_FDIV6_VAL
+	.word	CGU_DEF_FDIV7_VAL
+	.word	CGU_DEF_FDIV8_VAL
+	.word	CGU_DEF_FDIV9_VAL
+	.word	CGU_DEF_FDIV10_VAL
+	.word	CGU_DEF_FDIV11_VAL
+	.word	CGU_DEF_FDIV12_VAL
+	.word	CGU_DEF_FDIV13_VAL
+	.word	CGU_DEF_FDIV14_VAL
+	.word	CGU_DEF_FDIV15_VAL
+	.word	CGU_DEF_FDIV16_VAL
+	.word	CGU_DEF_FDIV17_VAL
+	.word	CGU_DEF_FDIV18_VAL
+	.word	CGU_DEF_FDIV19_VAL
+	.word	CGU_DEF_FDIV20_VAL
+	.word	CGU_DEF_FDIV21_VAL
+	.word	CGU_DEF_FDIV22_VAL
+	.word	CGU_DEF_FDIV23_VAL
+	.word	CGU_DEF_DYNFDIV0_VAL
+	.word	CGU_DEF_DYNFDIV1_VAL
+	.word	CGU_DEF_DYNFDIV2_VAL
+	.word	CGU_DEF_DYNFDIV3_VAL
+	.word	CGU_DEF_DYNFDIV4_VAL
+	.word	CGU_DEF_DYNFDIV5_VAL
+	.word	CGU_DEF_DYNFDIV6_VAL
+
+CGU_FDIV_CLKS:
+	.word	CGU_DEF_DOMAIN0_DIV0	 
+	.word	CGU_DEF_DOMAIN0_DIV1
+	.word	CGU_DEF_DOMAIN0_DIV2
+	.word	CGU_DEF_DOMAIN0_DIV3
+	.word	CGU_DEF_DOMAIN0_DIV4
+	.word	CGU_DEF_DOMAIN0_DIV5
+	.word	CGU_DEF_DOMAIN0_DIV6
+	.word	CGU_DEF_DOMAIN1_DIV7	 
+	.word	CGU_DEF_DOMAIN1_DIV8
+	.word	CGU_DEF_DOMAIN2_DIV9
+	.word	CGU_DEF_DOMAIN2_DIV10
+	.word	CGU_DEF_DOMAIN3_DIV11
+	.word	CGU_DEF_DOMAIN3_DIV12
+	.word	CGU_DEF_DOMAIN3_DIV13
+	.word	CGU_DEF_DOMAIN4_DIV14	 
+	.word	CGU_DEF_DOMAIN5_DIV15
+	.word	CGU_DEF_DOMAIN6_DIV16
+	.word	CGU_DEF_DOMAIN7_DIV17
+	.word	CGU_DEF_DOMAIN7_DIV18
+	.word	CGU_DEF_DOMAIN7_DIV19
+	.word	CGU_DEF_DOMAIN7_DIV20
+	.word	CGU_DEF_DOMAIN7_DIV21
+	.word	CGU_DEF_DOMAIN7_DIV22
+	.word	CGU_DEF_DOMAIN10_DIV23
+	.word	CGU_DEF_DYNFDIV0_CFG
+	.word	CGU_DEF_DYNFDIV1_CFG
+	.word	CGU_DEF_DYNFDIV2_CFG
+	.word	CGU_DEF_DYNFDIV3_CFG
+	.word	CGU_DEF_DYNFDIV4_CFG
+	.word	CGU_DEF_DYNFDIV5_CFG
+	.word	CGU_DEF_DYNFDIV6_CFG
+#endif
+
diff --git a/board/Redwire/rw_egg/rw_egg.c b/board/Redwire/rw_egg/rw_egg.c
new file mode 100644
index 0000000..dc09782
--- /dev/null
+++ b/board/Redwire/rw_egg/rw_egg.c
@@ -0,0 +1,213 @@
+/*
+* (C) Copyright 2007-2008
+* Stelian Pop <stelian.pop@leadtechdesign.com>
+* Lead Tech Design <www.leadtechdesign.com>
+*
+* See file CREDITS for list of people who contributed to this
+* project.
+*
+* This program is free software; you can redistribute it and/or
+* modify it under the terms of the GNU General Public License as
+* published by the Free Software Foundation; either version 2 of
+* the License, or (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the Free Software
+* Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+* MA 02111-1307 USA
+*/
+
+#include <common.h>
+#include <asm/arch/hardware.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/spi.h>
+#include <asm/arch/i2c.h>
+#include <net.h>
+#include <netdev.h>
+
+/* Event router macros */
+#define EVRT_VBUS_BANK                  3
+#define EVRT_VBUS_BIT			(1 << 23)
+
+
+#define PCA9532_SLAVE_ADDR		(0xC0)
+#define PCA9532_USB_VBUS_PWR_REG	0x07
+#define PCA9532_USB_VBUS_PWR_VAL	0x10
+
+DECLARE_GLOBAL_DATA_PTR;
+
+const SPI_SLAVE_CONFIG_T slavecfg =
+{
+	.sid = (SPI_SLAVE_ID_T)SPI_SLAVE1_ID,
+	.databits = 8,
+	.words = SPI_FIFO_DEPTH,
+	.mode = SPI_MODE0,
+	.cs_high = 0,
+	.pp_delay =0 ,
+	.inter_delay = 0,
+	.clk = 1000000
+};
+
+//extern int is_nand_init_done;
+//extern int is_spi_init_done;
+
+#ifdef CONFIG_DRIVER_DM9000
+int board_eth_init(bd_t *bis)
+{
+	return dm9000_initialize(bis);
+}
+#endif
+
+int misc_init_r(void)
+{
+	unsigned char i = 0;
+	unsigned char oft = 0;
+	uchar env_enetaddr[6];
+	char enetvar[32] = "ethaddr";
+	unsigned int rnd_num = 0;
+	char buf[32] = {0};
+
+	/*
+	* If "ethaddr" environment variable is 00:00:00:00:00:00,
+	* generate a random MAC address using Random Number Gen Module.
+	*/
+	eth_getenv_enetaddr(enetvar, env_enetaddr);
+	if((env_enetaddr[0] | env_enetaddr[1] | env_enetaddr[2] |
+		env_enetaddr[3] | env_enetaddr[4] | env_enetaddr[5]) == 0x0) {
+
+			/* Enable clock for Random Number Generator Module */
+			cgu_clk_en_dis(CGU_SB_RNG_PCLK_ID, 1);
+			rnd_num = *((volatile u32 *)(CIC_RNG_BASE));
+
+			env_enetaddr[0] = 0x00;
+			env_enetaddr[1] = 0x08;
+			for (i = 2; i < 6; i++) {
+				env_enetaddr[i] = ((rnd_num >> ((i - 2) * 8)) & 0xFF);
+			}
+
+			sprintf(buf,"%02x:%02x:%02x:%02x:%02x:%02x",
+				env_enetaddr[0], env_enetaddr[1],
+				env_enetaddr[2], env_enetaddr[3],
+				env_enetaddr[4], env_enetaddr[5]);
+			setenv(enetvar, buf);
+	}
+
+	/* fill device MAC address registers */
+	for (i = 0, oft = 0x10; i < 6; i++, oft++) {
+		*(volatile u8 *)DM9000_IO = oft;
+		*(volatile u8 *)DM9000_DATA = env_enetaddr[i];
+	}
+
+	for (i = 0, oft = 0x16; i < 8; i++, oft++) {
+		*(volatile u8 *)DM9000_IO = oft;
+		*(volatile u8 *)DM9000_DATA = 0xff;
+	}
+
+	return 0;
+}
+
+int board_init(void)
+{
+#ifdef CONFIG_EA3152
+	gd->bd->bi_arch_number = MACH_TYPE_EA3152;
+#else
+	gd->bd->bi_arch_number = MACH_TYPE_EA313X;
+#endif
+	/* adress of boot parameters */
+	gd->bd->bi_boot_params = PHYS_SDRAM + 0x100;
+
+#ifdef CONFIG_CMD_NAND
+	/* Initialize NAND device */
+//	if(is_nand_init_done == 0) {
+//		printf("\nNAND:  ");
+//		nand_init();
+//		is_nand_init_done = 1;
+//	}
+
+#endif
+
+#ifdef CONFIG_HARD_SPI
+	/* Inialize SPI NOR flash*/
+//	if(is_spi_init_done == 0) {
+//		spi_init();
+//		is_spi_init_done = 1;
+//	}
+#endif
+
+	/* Initialize I2C and also sets correct
+	* slave addresses for I2C0/I2C1 Controller
+	*/
+	i2c_init(CGU_SB_I2C0_PCLK_ID,I2C0_CTRL);
+#ifndef CONFIG_EA3152
+	i2c_init(CGU_SB_I2C1_PCLK_ID,I2C1_CTRL);
+#endif
+
+	/* for VBUS monitoring */
+	EVRT_ATR(EVRT_VBUS_BANK) &= ~EVRT_VBUS_BIT;
+	EVRT_APR(EVRT_VBUS_BANK) |= EVRT_VBUS_BIT;
+	lpc31xx_enable_vbus(1);
+	return 0;
+}
+
+int board_late_init(void)
+{
+#if CONFIG_CMD_NAND
+	prepare_write_nand_params_bbt(1);
+#endif
+}
+
+#ifdef CONFIG_USB_EHCI_LPC313X
+int lpc31xx_enable_vbus(int enable)
+{
+	static int init = 0;
+	int ret = 0;
+	printf("%s USB VBUS power..\n", (enable)?"Enabling":"Disabling");
+	if (enable) {
+		/* VBUS is wrong state */
+		if (EVRT_RSR(EVRT_VBUS_BANK) & EVRT_VBUS_BIT) {
+			/* level VBUS is already high. May be device
+			* cable is connected to PC.
+			*/
+			if (init == 0) {
+				printf("VBUS level is already high. Remove device cable"
+				" connected to mini-B connector and PC\n");
+				ret = -1;
+			}
+		} else {
+			/* enable VBUS power */
+			i2c_write(I2C0_CTRL, PCA9532_SLAVE_ADDR, PCA9532_USB_VBUS_PWR_REG, 
+				1, PCA9532_USB_VBUS_PWR_VAL, 1);
+			init = 1;
+			while (!(EVRT_RSR(EVRT_VBUS_BANK) & EVRT_VBUS_BIT)) {
+				udelay(1000);
+			}
+		}
+	} else {
+		/* disable VBUS power */
+		i2c_write(I2C0_CTRL, PCA9532_SLAVE_ADDR, PCA9532_USB_VBUS_PWR_REG, 
+			1, 0x00, 1);
+		init = 0;
+		while (EVRT_RSR(EVRT_VBUS_BANK) & EVRT_VBUS_BIT) {
+			udelay(1000);
+		}
+
+	}
+
+	return ret;
+}
+#endif
+
+/***********************************************************************/
+int dram_init(void)
+{
+	gd->ram_size = PHYS_SDRAM_SIZE;
+	gd->bd->bi_dram[0].start = PHYS_SDRAM;
+	gd->bd->bi_dram[0].size = PHYS_SDRAM_SIZE;
+	return 0;
+}
+
diff --git a/boards.cfg b/boards.cfg
index 77c385f..8342c43 100644
--- a/boards.cfg
+++ b/boards.cfg
@@ -155,6 +155,7 @@ sheevaplug                   arm         arm926ejs   -                   Marvell
 dockstar                     arm         arm926ejs   -                   Seagate        kirkwood
 ea3131                       arm         arm926ejs   ea3131              ElecArts       lpc313x
 ea3152                       arm         arm926ejs   ea3131              ElecArts       lpc313x
+rw_egg                       arm         arm926ejs   rw_egg              Redwire        lpc313x
 jadecpu                      arm         arm926ejs   jadecpu             syteco         mb86r0x
 mx25pdk                      arm         arm926ejs   mx25pdk             freescale      mx25		mx25pdk:IMX_CONFIG=board/freescale/mx25pdk/imximage.cfg
 tx25                         arm         arm926ejs   tx25                karo           mx25
diff --git a/include/configs/rw_egg.h b/include/configs/rw_egg.h
new file mode 100644
index 0000000..18f0804
--- /dev/null
+++ b/include/configs/rw_egg.h
@@ -0,0 +1,328 @@
+/*
+ * (C) Copyright 2007
+ * Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+ *
+ * Configuation settings for the LPC313X board from Embedded Artists.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#define USE_NAND
+#define CONFIG_ENV_IS_NOWHERE          1
+
+/*
+ * If we are developing, we might want to start u-boot from ram
+ * so we MUST NOT initialize critical regs like mem-timing ...
+ */
+#undef CONFIG_SKIP_LOWLEVEL_INIT
+#undef CONFIG_USE_IRQ			/* don't need them anymore */
+#undef CONFIG_CMD_FLASH
+#undef CFG_CLKS_IN_HZ			/* everything, incl board info, in Hz */
+
+/*
+ * SoC Configuration
+ */
+#define CONFIG_LPC313X		1		/* This is a ARM926EJS CPU */
+#define CONFIG_ARM_THUMB	1		/* Use Thumb instruction set */
+/*#define CONFIG_PLL_270		1		* Use 270MHz Clk Freq */
+#define XTAL_IN			12000000	/* Crystal clk freq */
+#define CONFIG_SYS_HZ		(XTAL_IN / 256)	/* decrementer freq in Hz */
+#define CONFIG_SYS_NO_FLASH			/* No NOR flash */
+
+/* LPC313x U-boot bootmode support.
+ * The following defines effect which low-level boot mode
+ * is supported to boot u-boot images.
+ */
+#if 0
+#define CONFIG_CPU_NAND_BOOT
+#define CONFIG_CPU_SPI_BOOT
+#define CONFIG_CPU_USBDFU_BOOT
+#endif
+#define CONFIG_CPU_MMC_BOOT
+#if 0
+#define CONFIG_CPU_NOR_BOOT
+#define CONFIG_CPU_UART_BOOT
+#endif
+
+#define CONFIG_LPC313x_BOOT_HEADER
+
+/*
+ * Memory Info
+ */
+#define CONFIG_SYS_TEXT_BASE		0x31200000
+
+
+#define CONFIG_NR_DRAM_BANKS	1		/* we have 1 bank of DRAM */
+#define PHYS_SDRAM		0x30000000	/* SDRAM Bank #1 */
+#define PHYS_SDRAM_SIZE                0x02000000      /* 32 MB SDRAM */
+
+#define CONFIG_SYS_SDRAM_BASE	PHYS_SDRAM
+#define CONFIG_SYS_SDRAM_SIZE	PHYS_SDRAM_SIZE
+
+#define CONFIG_SYS_INIT_RAM_ADDR	0x11029000
+#define CONFIG_SYS_INIT_RAM_SIZE	0x00018000
+#define CONFIG_SYS_GBL_DATA_OFFSET	(CONFIG_SYS_INIT_RAM_SIZE - \
+						GENERATED_GBL_DATA_SIZE)
+#define CONFIG_SYS_INIT_SP_ADDR	(CONFIG_SYS_INIT_RAM_ADDR + \
+						CONFIG_SYS_GBL_DATA_OFFSET)
+
+/* Defines for SPL */
+#define CONFIG_SPL
+
+#define CONFIG_SPL_LIBGENERIC_SUPPORT
+#define CONFIG_SPL_LIBCOMMON_SUPPORT
+
+#if 0
+#define CONFIG_SPL_LIBCOMMON_SUPPORT
+#define CONFIG_SPL_LIBGENERIC_SUPPORT
+#define CONFIG_SPL_LIBDISK_SUPPORT
+#define CONFIG_SPL_NAND_SUPPORT
+#define CONFIG_SPL_SPI_SUPPORT
+#define CONFIG_SPL_SPI_FLASH_SUPPORT
+#endif
+#define CONFIG_SPL_MMC_SUPPORT
+#if 0
+#define CONFIG_SPL_SERIAL_SUPPORT
+#define CONFIG_SPL_USB_GADGET_SUPPORT
+#endif
+#define CONFIG_SPL_LDSCRIPT		"$(CPUDIR)/lpc313x/u-boot-spl.lds"
+
+#define CONFIG_SPL_TEXT_BASE		0x11029000	/* CONFIG_SYS_INIT_RAM_ADDR */
+#define CONFIG_SPL_MAX_SIZE		0x00014000	/* CONFIG_SYS_INIT_RAM_SIZE */
+#define CONFIG_SPL_STACK		0x1103B000	/* CONFIG_SYS_INIT_SP_ADDR */
+
+#define CONFIG_SPL_BSS_START_ADDR	0x30000000	/* PHYS_SDRAM */
+#define CONFIG_SPL_BSS_MAX_SIZE		0x80000
+
+#define CONFIG_BOARD_LATE_INIT
+
+/*
+ * U-Boot memory configuration
+ */
+#define CONFIG_STACKSIZE		(32 * 1024)	/* regular stack */
+#ifdef CONFIG_USE_IRQ
+#define CONFIG_STACKSIZE_IRQ		(4*1024)	/* IRQ stack */
+#define CONFIG_STACKSIZE_FIQ		(4*1024)	/* FIQ stack */
+#endif
+#define CONFIG_SYS_MALLOC_LEN		(1 * 1024 * 1024)		/* No need for any malloc space, we steal from the end of the DRAM */
+#define CONFIG_SYS_GBL_DATA_SIZE	128		/* size in bytes reserved for initial data */
+#define CONFIG_SYS_MEMTEST_START	0x30000000	/* memtest works on */
+#define CONFIG_SYS_MEMTEST_END		0x33FFFFFF	/* 64MB of DRAM */
+
+/* 
+ * Ethernet Driver 7 Network Configuratin.
+ * */
+#define CONFIG_CMD_NET
+#define CONFIG_DRIVER_DM9000		1
+#define CONFIG_DM9000_BASE		0x20020000
+#define DM9000_IO			CONFIG_DM9000_BASE
+#define DM9000_DATA			(CONFIG_DM9000_BASE + 0x10000)
+#define CONFIG_NET_MULTI
+#define CONFIG_CMD_DHCP			1
+#define CONFIG_CMD_PING			1
+#define CONFIG_NET_RETRY_COUNT		100
+/*
+ * Uncomment this below line if you want static IP
+ * support. Don't forget to change "net_boot" command.
+ * In "net_boot" command, use tftpboot instead of dhcp.
+ */
+#if 0
+#define CONFIG_IPADDR			192.168.1.60
+#define CONFIG_SERVERIP			192.168.1.45
+#define CONFIG_GATEWAYIP		192.168.1.1
+#define CONFIG_NETMASK			255.255.255.0
+#endif
+
+/* Linux boot using network */
+#define CONFIG_BOOTCOMMAND		"run sdmmc_boot"
+
+/*
+ * Serial Driver Console
+ */
+#define CONFIG_SERIAL1			1	/* we use Serial line 1 */
+#define CONFIG_BAUDRATE			115200
+#define CONFIG_SYS_BAUDRATE_TABLE	{ 9600, 19200, 38400, 57600, 115200 }
+
+/*
+ * U-boot Boot configuration
+ */
+#define CONFIG_BOOTFILE			"uImage"
+#define CONFIG_BOOTDELAY		1
+#define CONFIG_EXTRA_ENV_SETTINGS	\
+"loadaddr=0x31000000\0" \
+"rd_addr=0x32000000\0" \
+"usbtty=cdc_acm\0" \
+"ramargs=setenv bootargs console=ttyS0,115200n8 root=/dev/mmcblk0p3 init=/etc/preinit rw loglevel=7\0" \
+"serverip=192.168.1.48\0" \
+"nfsargs=setenv bootargs console=ttyS0,115200n8 root=/dev/nfs init=/etc/preinit rw nfsroot=${serverip}:${rootpath} ip=dhcp loglevel=7\0" \
+"rootpath=/tftpboot/arm\0" \
+"bootfile=uImage\0" \
+"ramfile=rootfs.ext2.gz.uboot\0" \
+"net_boot=dhcp; run nfsargs; bootm $(loadaddr)\0" \
+"spi_boot= sf probe 0 0 0; sf read $(loadaddr) 0x42000 0x200000; run nfsargs; bootm $(loadaddr)\0" \
+"nand_boot= nand read $(loadaddr) 0x80000 0x200000; run ramargs; bootm $(loadaddr)\0" \
+"sdmmc_boot= mmc init; fatload mmc 0 $(loadaddr) $(bootfile); run ramargs; bootm $(loadaddr)\0" \
+"usbdfu_boot= usbpoll $(loadaddr); run nfsargs; bootm $(loadaddr)\0" \
+"usb_boot= usb start; fatload usb 0 $(loadaddr) $(bootfile); run nfsargs; bootm $(loadaddr)\0" \
+"uart_boot= loady; run nfsargs; bootm $(loadaddr)\0" \
+"netram_boot=dhcp; tftp $(rd_addr) $(ramfile); run ramargs; bootm $(loadaddr) $(rd_addr)\0" \
+"spiram_boot= sf probe 0 0 0; sf read $(loadaddr) 0x42000 0x200000; sf read $(rd_addr) 0x243000 0x400000; run ramargs; bootm $(loadaddr) $(rd_addr)\0" \
+"nandram_boot= nand read $(loadaddr) 0x80000 0x200000; nand read $(rd_addr) 0x2a0000 0x400000; run ramargs; bootm $(loadaddr) $(rd_addr)\0" \
+"sdmmcram_boot= mmc init; fatload mmc 0 $(loadaddr) $(bootfile); fatload mmc 0 $(rd_addr) $(ramfile); run ramargs; bootm $(loadaddr) $(rd_addr)\0" \
+"usbdfuram_boot= usbpoll $(loadaddr); usbpoll $(rd_addr); run ramargs; bootm $(loadaddr) $(rd_addr)\0" \
+"usbram_boot= usb start; fatload usb 0 $(loadaddr) $(bootfile); fatload usb 0 $(rd_addr) $(ramfile); run ramargs; bootm $(loadaddr) $(rd_addr)\0" \
+"uartram_boot= loady; loady $(rd_addr); run ramargs; bootm $(loadaddr) $(rd_addr)\0" \
+""
+
+/*
+ * Linux interfacing
+ */
+#define CONFIG_CMDLINE_TAG
+#define CONFIG_SETUP_MEMORY_TAGS
+#define CONFIG_INITRD_TAG
+#define CONFIG_SYS_MAXARGS		16			/* max number of command args	*/
+#define CONFIG_SYS_BARGSIZE		CONFIG_SYS_CBSIZE	/* Boot Argument Buffer Size	*/
+
+/*
+ * U-boot geneal configurable
+ */
+#define CONFIG_SYS_LONGHELP				/* undef to save memory */
+#define CONFIG_SYS_PROMPT		"Redwire Egg # "	/* Monitor Command Prompt */
+
+#define CONFIG_SYS_CBSIZE		256		/* Console I/O Buffer Size */
+#define CONFIG_SYS_PBSIZE		(CONFIG_SYS_CBSIZE+sizeof(CONFIG_SYS_PROMPT)+16) 
+#define CONFIG_SYS_LOAD_ADDR		11029000
+#define CONFIG_ENV_OVERWRITE		/* allow to overwrite serial and ethaddr */
+#define CONFIG_AUTO_COMPLETE
+#define CONFIG_CMDLINE_EDITING
+#define CONFIG_PANIC_HANG
+
+#include <config_cmd_default.h>
+/*
+ * U-boot Generic Command line configuration.
+ */
+#define CONFIG_CMD_AUTOSCRIPT	/* Autoscript Support */
+#define CONFIG_CMD_BDI		/* bdinfo */
+#define CONFIG_CMD_BOOTD	/* bootd */
+#define CONFIG_CMD_CONSOLE	/* coninfo */
+#define CONFIG_CMD_ECHO		/* echo arguments */
+/*#define CONFIG_CMD_SAVEENV */        /* saveenv */ 
+#define CONFIG_CMD_IMI		/* iminfo */
+#define CONFIG_CMD_MISC		/* Misc functions like sleep etc*/
+#define CONFIG_CMD_RUN		/* run command in env variable */
+#define CONFIG_CMD_SETGETDCR	/* DCR support on 4xx */
+#define CONFIG_CMD_XIMG		/* Load part of Multi Image */
+#define CONFIG_CMD_MEMORY	/* Use for Memory*/
+#define CONFIG_CMD_LOADB
+#define CONFIG_MISC_INIT_R
+/*
+ * Flash (NAND,SPINOR) configuration
+ */
+/* Micron NAND Flash support */
+#define CONFIG_CMD_NAND                        0
+#define CONFIG_NAND_LPC313X            0
+#define CONFIG_ENV_IS_IN_NAND  0
+#define LPC313X_NAND_LP_SUPPORT                0
+#define CONFIG_SYS_NAND_BASE		0x00000000
+#define CONFIG_SYS_MAX_NAND_DEVICE     0               /* Max number of NAND devices */
+#define NAND_MAX_CHIPS                 0
+
+/* ATMEL SPI based NOR Flash support */
+#define CONFIG_HARD_SPI                        0
+#define CONFIG_LPC313X_SPI             0
+#define CONFIG_SPI_FLASH               0
+#define CONFIG_SPI_FLASH_ATMEL         0
+#define CONFIG_CMD_SF                  0
+#define CONFIG_ENV_IS_IN_SPI_FLASH     0
+
+#ifdef CONFIG_ENV_IS_IN_NAND
+#ifdef LPC313X_NAND_LP_SUPPORT
+#define CONFIG_ENV_OFFSET		0x60000		/* Addr of Environment Sector */
+#define CONFIG_ENV_SIZE			0x20000		/* Total Size of Environment Sector */
+#else
+#define CONFIG_ENV_OFFSET		0x20000		/* Addr of Environment Sector */
+#define CONFIG_ENV_SIZE			0x4000		/* Total Size of Environment Sector */
+#endif
+#else
+
+#ifdef CONFIG_ENV_IS_IN_SPI_FLASH
+#define CONFIG_ENV_SIZE			0x1000		/* Total Size of Environment Sector */
+#define CONFIG_ENV_SECT_SIZE		0x10000
+#define CONFIG_ENV_OFFSET		0x40000
+
+#else
+#define CONFIG_ENV_OFFSET		0x00		/* Addr of Environment Sector */
+#define CONFIG_ENV_SIZE			0x800		/* Total Size of Environment Sector */
+#define CONFIG_ENV_IS_NOWHERE		1
+
+#endif
+#endif
+
+#define CONFIG_SYS_I2C_SPEED		100000
+
+#define CONFIG_OF_LIBFDT
+
+/* Uncomment if you want USB host support and
+ * disable USB gadget supoprt. Please note if
+ * you disable USB gadget support, USB DFU boot
+ * mode will not work.
+ */
+/*
+ * USB configuration as EHCI HOST
+ */
+
+#define CONFIG_CMD_USB
+#define CONFIG_USB_EHCI			/* Enable EHCI USB support */
+#define CONFIG_USB_EHCI_LPC313X		/* on LPC313X platform */
+#define CONFIG_EHCI_IS_TDI
+#define CONFIG_USB_STORAGE
+#define CONFIG_SUPPORT_VFAT
+/*#undef CONFIG_CPU_USBDFU_BOOT*/
+
+
+/*
+ * USB configuration as GADGET
+ */
+#define CONFIG_USB_DEVICE		1
+#define CONFIG_USB_TTY			1
+#define CONFIG_SYS_CONSOLE_IS_IN_ENV	1
+#define CONFIG_USBD_VENDORID		0x1457	/* Linux/NetChip */
+#define CONFIG_USBD_PRODUCTID_CDCACM	0x5119	/* CDC ACM */
+#define CONFIG_USBD_MANUFACTURER	"OpenMoko, Inc"
+#define CONFIG_USBD_PRODUCT_NAME	"LPC313x Bootloader " U_BOOT_VERSION
+#define CONFIG_USB_DFU			1
+#define CONFIG_USBD_DFU_XFER_SIZE	4096	/* 0x1000 */
+#define CONFIG_USBD_DFU_INTERFACE	2
+
+/*
+ * MMC Driver configuration
+ */
+#define CONFIG_CMD_MMC			1
+#define CONFIG_MMC			1
+
+#define CONFIG_CMD_FAT			1
+#define CONFIG_DOS_PARTITION
+#define CONFIG_ISO_PARTITION 
+
+
+
+#endif /* __CONFIG_H */
